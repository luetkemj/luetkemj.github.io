{"version":3,"file":"component---src-templates-blog-template-js-86e2a861843e3b5636b8.js","mappings":"sPAQe,SAASA,EAAT,GAEX,IADFC,EACC,EADDA,KAGEC,EAMED,EANFC,eACAC,EAKEF,EALFE,QACAC,EAIEH,EAJFG,SACAC,EAGEJ,EAHFI,iBACAC,EAEEL,EAFFK,aACAC,EACEN,EADFM,qBAEMC,EAA+BN,EAA/BM,YAAaC,EAAkBP,EAAlBO,KAAMC,EAAYR,EAAZQ,QAsB3B,IAGQC,EACAC,EAJFC,EApBN,WAEE,GAAIL,EAAYM,aAAc,CAE5B,GAAIN,EAAYM,aAAaC,WAAW,QAEtC,OAAOP,EAAYM,aAGnB,IAAME,EAAYb,EAAQc,MAAMC,QAC9B,SAACC,GAAD,OACEA,EAAKC,KAAKC,eAAiB,IAAKb,EAAYM,aAAaQ,MAAM,KADjE,IAGF,OAAO,IAAIN,EAAW,qBAEzB,CAGF,CAEmBO,GAkCpB,OACE,gCACE,gBAAC,IAAD,CAAKX,MAAOJ,EAAYI,MAAOY,YAAad,IAC5C,uBAAKe,UAAU,iBACb,uBAAKA,UAAU,uBACZZ,GACC,uBACEY,UAAU,8BACVC,IAAKb,EACLc,IAAI,KAGR,uBAAKF,UAAU,2BACb,gBAAC,IAAD,CAAUG,SAAUpB,EAAYqB,cAElC,sBAAIJ,UAAU,uBAAuBjB,EAAYsB,MACjD,sBAAIL,UAAU,wBAAwBjB,EAAYI,OAClD,uBACEa,UAAU,yBACVM,wBAAyB,CAAEC,OAAQvB,OAIjB,SAAvBD,EAAYyB,QACX,uBAAKR,UAAU,uBAvDbd,EAAO,IAAIL,EAAc,sBACzBM,EAAQ,IAAIL,EAAsB,qBAGtC,uBAAKkB,UAAS,gCACXd,GAAQC,GACP,gCACU,2BACR,gBAAC,EAAAsB,KAAD,CAAMC,GAAIxB,GAAOC,MAON,WACnB,IAAMD,EAAO,IAAIP,EAAU,sBACrBQ,EAAQ,IAAIP,EAAkB,qBAEpC,OACE,uBAAKoB,UAAS,4BACXd,GAAQC,GACP,gCACU,2BACR,gBAAC,EAAAsB,KAAD,CAAMC,GAAIxB,GAAOC,IAK1B,CA4BQwB,IAKV,C,kBCvFDC,EAAOC,QALP,SAAcC,GACZ,IAAIC,EAAkB,MAATD,EAAgB,EAAIA,EAAMC,OACvC,OAAOA,EAASD,EAAMC,EAAS,QAAKC,CACtC,C","sources":["webpack://luetkemj.website/./src/templates/blogTemplate.js","webpack://luetkemj.website/./node_modules/lodash/last.js"],"sourcesContent":["import { graphql } from 'gatsby'\nimport React from 'react'\nimport './blogTemplate.scss'\nimport { Link } from 'gatsby'\nimport { get, last } from 'lodash'\nimport SEO from '../components/seo'\nimport Category from '../components/category'\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const {\n    markdownRemark,\n    allFile,\n    nextPost,\n    nextPostMarkdown,\n    previousPost,\n    previousPostMarkdown,\n  } = data // data.markdownRemark holds our post data\n  const { frontmatter, html, excerpt } = markdownRemark\n\n  function getBannerImage() {\n    // check if there is an banner image and just return if not.\n    if (frontmatter.illustration) {\n      // check if image is external\n      if (frontmatter.illustration.startsWith('http')) {\n        // go ahead and return external images as is\n        return frontmatter.illustration\n      } else {\n        // filter on all imageNodes and find the right one\n        const imageNode = allFile.edges.filter(\n          (edge) =>\n            edge.node.relativePath === last(frontmatter.illustration.split('/'))\n        )\n        return get(imageNode, '[0].node.publicURL')\n      }\n    }\n\n    return\n  }\n\n  const bannerImage = getBannerImage()\n\n  const previousPostLink = () => {\n    const path = get(previousPost, 'edges[0].node.path')\n    const title = get(previousPostMarkdown, 'frontmatter.title')\n\n    return (\n      <div className={`blog-template__nav__previous`}>\n        {path && title && (\n          <div>\n            &#9756; <br />\n            <Link to={path}>{title}</Link>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  const nextPostLink = () => {\n    const path = get(nextPost, 'edges[0].node.path')\n    const title = get(nextPostMarkdown, 'frontmatter.title')\n\n    return (\n      <div className={`blog-template__nav__next`}>\n        {path && title && (\n          <div>\n            &#9758; <br />\n            <Link to={path}>{title}</Link>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <SEO title={frontmatter.title} description={excerpt} />\n      <div className=\"blog-template\">\n        <div className=\"blog-template__post\">\n          {bannerImage && (\n            <img\n              className=\"blog-template__banner-image\"\n              src={bannerImage}\n              alt=\"\"\n            />\n          )}\n          <div className=\"blog-template__category\">\n            <Category category={frontmatter.categories} />\n          </div>\n          <h2 className=\"blog-template__date\">{frontmatter.date}</h2>\n          <h1 className=\"blog-template__title\">{frontmatter.title}</h1>\n          <div\n            className=\"blog-template__content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n      {frontmatter.layout === 'post' && (\n        <div className=\"blog-template__nav\">\n          {previousPostLink()}\n          {nextPostLink()}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByPath(\n    $path: String!\n    $nextPostPath: String\n    $previousPostPath: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n    markdownRemark(fields: { path: { eq: $path } }) {\n      excerpt\n      html\n      frontmatter {\n        date(formatString: \"YYMMDD\")\n        title\n        illustration\n        layout\n        categories\n      }\n    }\n    allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n      edges {\n        node {\n          relativePath\n          publicURL\n        }\n      }\n    }\n    nextPost: allSitePage(filter: { path: { eq: $nextPostPath } }) {\n      edges {\n        node {\n          path\n        }\n      }\n    }\n    nextPostMarkdown: markdownRemark(fields: { path: { eq: $nextPostPath } }) {\n      frontmatter {\n        title\n      }\n    }\n    previousPost: allSitePage(filter: { path: { eq: $previousPostPath } }) {\n      edges {\n        node {\n          path\n        }\n      }\n    }\n    previousPostMarkdown: markdownRemark(\n      fields: { path: { eq: $previousPostPath } }\n    ) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n"],"names":["Template","data","markdownRemark","allFile","nextPost","nextPostMarkdown","previousPost","previousPostMarkdown","frontmatter","html","excerpt","path","title","bannerImage","illustration","startsWith","imageNode","edges","filter","edge","node","relativePath","split","getBannerImage","description","className","src","alt","category","categories","date","dangerouslySetInnerHTML","__html","layout","Link","to","nextPostLink","module","exports","array","length","undefined"],"sourceRoot":""}