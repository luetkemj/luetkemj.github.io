{"version":3,"sources":["webpack:///./src/templates/blogTemplate.js"],"names":["Template","data","markdownRemark","allFile","nextPost","nextPostMarkdown","previousPost","previousPostMarkdown","frontmatter","html","excerpt","path","title","bannerImage","illustration","startsWith","imageNode","edges","filter","edge","node","relativePath","last","split","get","getBannerImage","description","className","src","alt","date","dangerouslySetInnerHTML","__html","layout","to","nextPostLink","pageQuery"],"mappings":"iRAMe,SAASA,EAAT,GAEX,IADFC,EACC,EADDA,KAGEC,EAMED,EANFC,eACAC,EAKEF,EALFE,QACAC,EAIEH,EAJFG,SACAC,EAGEJ,EAHFI,iBACAC,EAEEL,EAFFK,aACAC,EACEN,EADFM,qBAEMC,EAA+BN,EAA/BM,YAAaC,EAAkBP,EAAlBO,KAAMC,EAAYR,EAAZQ,QAsB3B,IAGQC,EACAC,EAJFC,EApBN,WAEE,GAAIL,EAAYM,aAAc,CAE5B,GAAIN,EAAYM,aAAaC,WAAW,QAEtC,OAAOP,EAAYM,aAGnB,IAAME,EAAYb,EAAQc,MAAMC,QAC9B,SAAAC,GAAI,OACFA,EAAKC,KAAKC,eAAiBC,eAAKd,EAAYM,aAAaS,MAAM,SAEnE,OAAOC,cAAIR,EAAW,uBAORS,GAkCpB,OACE,oCACE,kBAAC,IAAD,CAAKb,MAAOJ,EAAYI,MAAOc,YAAahB,IAC5C,yBAAKiB,UAAU,iBACb,yBAAKA,UAAU,uBACZd,GACC,yBACEc,UAAU,8BACVC,IAAKf,EACLgB,IAAI,KAGR,wBAAIF,UAAU,uBAAuBnB,EAAYsB,MACjD,wBAAIH,UAAU,wBAAwBnB,EAAYI,OAClD,yBACEe,UAAU,yBACVI,wBAAyB,CAAEC,OAAQvB,OAIjB,SAAvBD,EAAYyB,QACX,yBAAKN,UAAU,uBApDbhB,EAAOa,cAAIlB,EAAc,sBACzBM,EAAQY,cAAIjB,EAAsB,qBAGtC,yBAAKoB,UAAS,gCACXhB,GAAQC,GACP,kCACU,6BACR,kBAAC,OAAD,CAAMsB,GAAIvB,GAAOC,MAON,WACnB,IAAMD,EAAOa,cAAIpB,EAAU,sBACrBQ,EAAQY,cAAInB,EAAkB,qBAEpC,OACE,yBAAKsB,UAAS,4BACXhB,GAAQC,GACP,kCACU,6BACR,kBAAC,OAAD,CAAMsB,GAAIvB,GAAOC,KA8BlBuB,KAOJ,IAAMC,EAAS","file":"component---src-templates-blog-template-js-824bc1d315d6f7bfeb9d.js","sourcesContent":["import React from 'react'\nimport './blogTemplate.scss'\nimport { Link } from 'gatsby'\nimport { get, last } from 'lodash'\nimport SEO from '../components/seo'\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const {\n    markdownRemark,\n    allFile,\n    nextPost,\n    nextPostMarkdown,\n    previousPost,\n    previousPostMarkdown,\n  } = data // data.markdownRemark holds our post data\n  const { frontmatter, html, excerpt } = markdownRemark\n\n  function getBannerImage() {\n    // check if there is an banner image and just return if not.\n    if (frontmatter.illustration) {\n      // check if image is external\n      if (frontmatter.illustration.startsWith('http')) {\n        // go ahead and return external images as is\n        return frontmatter.illustration\n      } else {\n        // filter on all imageNodes and find the right one\n        const imageNode = allFile.edges.filter(\n          edge =>\n            edge.node.relativePath === last(frontmatter.illustration.split('/'))\n        )\n        return get(imageNode, '[0].node.publicURL')\n      }\n    }\n\n    return\n  }\n\n  const bannerImage = getBannerImage()\n\n  const previousPostLink = () => {\n    const path = get(previousPost, 'edges[0].node.path')\n    const title = get(previousPostMarkdown, 'frontmatter.title')\n\n    return (\n      <div className={`blog-template__nav__previous`}>\n        {path && title && (\n          <div>\n            &#9756; <br />\n            <Link to={path}>{title}</Link>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  const nextPostLink = () => {\n    const path = get(nextPost, 'edges[0].node.path')\n    const title = get(nextPostMarkdown, 'frontmatter.title')\n\n    return (\n      <div className={`blog-template__nav__next`}>\n        {path && title && (\n          <div>\n            &#9758; <br />\n            <Link to={path}>{title}</Link>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <SEO title={frontmatter.title} description={excerpt} />\n      <div className=\"blog-template\">\n        <div className=\"blog-template__post\">\n          {bannerImage && (\n            <img\n              className=\"blog-template__banner-image\"\n              src={bannerImage}\n              alt=\"\"\n            />\n          )}\n          <h2 className=\"blog-template__date\">{frontmatter.date}</h2>\n          <h1 className=\"blog-template__title\">{frontmatter.title}</h1>\n          <div\n            className=\"blog-template__content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n      {frontmatter.layout === 'post' && (\n        <div className=\"blog-template__nav\">\n          {previousPostLink()}\n          {nextPostLink()}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByPath(\n    $path: String!\n    $nextPostPath: String\n    $previousPostPath: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n    markdownRemark(fields: { path: { eq: $path } }) {\n      excerpt\n      html\n      frontmatter {\n        date(formatString: \"YYMMDD\")\n        title\n        illustration\n        layout\n      }\n    }\n    allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n      edges {\n        node {\n          relativePath\n          publicURL\n        }\n      }\n    }\n    nextPost: allSitePage(filter: { path: { eq: $nextPostPath } }) {\n      edges {\n        node {\n          path\n        }\n      }\n    }\n    nextPostMarkdown: markdownRemark(fields: { path: { eq: $nextPostPath } }) {\n      frontmatter {\n        title\n      }\n    }\n    previousPost: allSitePage(filter: { path: { eq: $previousPostPath } }) {\n      edges {\n        node {\n          path\n        }\n      }\n    }\n    previousPostMarkdown: markdownRemark(\n      fields: { path: { eq: $previousPostPath } }\n    ) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}