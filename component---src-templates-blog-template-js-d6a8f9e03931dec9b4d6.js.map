{"version":3,"sources":["webpack:///./src/templates/blogTemplate.js","webpack:///./src/components/seo.js","webpack:///./node_modules/core-js/modules/es6.string.starts-with.js"],"names":["Template","_ref","data","markdownRemark","allFile","nextPost","nextPostMarkdown","previousPost","previousPostMarkdown","frontmatter","html","excerpt","path","title","bannerImage","illustration","startsWith","imageNode","edges","filter","edge","node","relativePath","last","split","get","getBannerImage","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","Fragment","_components_seo__WEBPACK_IMPORTED_MODULE_6__","description","className","src","alt","date","dangerouslySetInnerHTML","__html","layout","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","nextPostLink","pageQuery","titleTemplate","siteTitle","SEO","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_1___default","query","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","link","rel","href","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired","$export","__webpack_require__","toLength","context","$startsWith","P","F","searchString","that","this","index","Math","min","arguments","undefined","search","String","call","slice"],"mappings":"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","file":"component---src-templates-blog-template-js-d6a8f9e03931dec9b4d6.js","sourcesContent":["import React from \"react\";\nimport './blogTemplate.scss';\nimport { Link } from 'gatsby';\nimport { get, last } from 'lodash';\nimport SEO from '../components/seo';\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark, allFile, nextPost, nextPostMarkdown, previousPost, previousPostMarkdown } = data; // data.markdownRemark holds our post data\n  const { frontmatter, html, excerpt } = markdownRemark;\n\n  function getBannerImage() {\n    // check if there is an banner image and just return if not.\n    if (frontmatter.illustration) {\n      // check if image is external\n      if (frontmatter.illustration.startsWith('http')) {\n        // go ahead and return external images as is\n        return frontmatter.illustration;\n      } else {\n        // filter on all imageNodes and find the right one\n        const imageNode = allFile.edges.filter(edge => edge.node.relativePath === last(frontmatter.illustration.split('/')));\n        return get(imageNode, '[0].node.publicURL');\n      }\n    }\n\n    return;\n  }\n\n  const bannerImage = getBannerImage();\n\n  const previousPostLink = () => {\n    const path = get(previousPost, 'edges[0].node.path');\n    const title = get(previousPostMarkdown, 'frontmatter.title');\n\n    return (\n      <div className={`blog-template__nav__previous`}>\n        {path && title && <div>&#9756; <br/><Link to={path}>{title}</Link></div>}\n      </div>\n    )\n  }\n\n  const nextPostLink = () => {\n    const path = get(nextPost, 'edges[0].node.path');\n    const title = get(nextPostMarkdown, 'frontmatter.title');\n\n    return (\n      <div className={`blog-template__nav__next`}>\n        {path && title && <div>&#9758; <br/><Link to={path}>{title}</Link></div>}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <SEO \n        title={frontmatter.title}\n        description={excerpt}\n      />\n      <div className=\"blog-template\">\n        <div className=\"blog-template__post\">\n          {bannerImage && <img className=\"blog-template__banner-image\" src={bannerImage} alt=\"\"/>}\n          <h2 className=\"blog-template__date\">{frontmatter.date}</h2>\n          <h1 className=\"blog-template__title\">{frontmatter.title}</h1>\n          <div\n            className=\"blog-template__content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n      {\n        frontmatter.layout === 'post' &&\n        <div className=\"blog-template__nav\">\n          {previousPostLink()}\n          {nextPostLink()}\n        </div>\n      }\n    </>\n  );\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!, $nextPostPath: String, $previousPostPath: String) {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n    markdownRemark(fields: { path: { eq: $path } }) {\n      excerpt\n      html\n      frontmatter {\n        date(formatString: \"YYMMDD\")\n        title\n        illustration\n        layout\n      }\n    }\n    allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n      edges {\n        node {\n          relativePath\n          publicURL\n        }\n      }\n    }\n    nextPost: allSitePage(filter: { path: { eq: $nextPostPath } }) {\n      edges { node { path } }\n    }\n    nextPostMarkdown: markdownRemark(fields: { path: { eq: $nextPostPath } }) {\n      frontmatter { title }\n    }\n    previousPost: allSitePage(filter: { path: { eq: $previousPostPath } }) {\n      edges { node { path } }\n    }\n    previousPostMarkdown: markdownRemark(fields: { path: { eq: $previousPostPath } }) {\n      frontmatter { title }\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst titleTemplate = (title, siteTitle) => {\n  if (title === siteTitle) {\n    return title;\n  }\n\n  return `%s Â· ${siteTitle}`;\n}\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            link={[\n              { rel: 'stylesheet', href: 'https://fonts.googleapis.com/css?family=Karla:400,400i,700,700i' },\n              { rel: 'stylesheet', href: 'https://fonts.googleapis.com/css?family=Inconsolata' },\n            ]}\n            title={title}\n            titleTemplate={titleTemplate(title, data.site.siteMetadata.title)}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n"],"sourceRoot":""}